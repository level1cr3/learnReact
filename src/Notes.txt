React:

# What is React ? How it helps us create better application ?
> React is js library for building dynamic and interactive user interfaces. It was created in facebook in 2011. 
and is currently the most used js library for frontend development.

# why was react created ?
> we know when a webpage is loaded in the browser. The browser takes the html code and creates a tree like structure called. 
Document object model (DOM). This allows us to use js and change the page content in response to user action.

ex: we can use js to hide and element when an button is clicked.

As our application grows working with DOM can get complex and challenging to manage. 

This is where react comes in.

> With react we don't have to worry about querying and updating the dom element. Instead we describe webpage using small reuseable components.
And react will take care of efficiently creating and updating DOM element.

> components help us write reuseable, modular and better organized code.

> we can build components individually. components being for ex: search bar, navbar, main gird, card in that grid.
  and combine them to build the page.
  
> essentially a react application is tree of components. With App being the root. bringing everything together.  


# There are 2 ways to create react app.
1> create react app (CRA) official way.
2> Vite (is more popular because it is much faster then CRA. and gives us smaller bundle sizes.)

> to create new app using vite.
 > npm create vite@latest
 > npm create vite@4.1.0
 
 
>  extension of ts file should be either
	.ts : for plain ts file
	.tsx : tsx for react components.
	
# There are 2 ways to create react components	
	> class
	> Function
	
	# These days Function based components have become more popular. Because they are concise and easier to write.
	
	> for class components watch older course.
	
	> Function based components are the recommended approach for the new projects.

===================================================================================================

# How React works ?	
> currently we have a component tree. with 'App' being the root and 'Message' being the child node.
	
	App
	 |
	 |
  Message 

  When our application starts react takes this component tree. and builds the js data-structure called 'virtual dom'

  div
   |
   |
   h1

 This 'virtual DOM'  is different from the actual DOM in the browser. It's light weight in memory representation of our 
 component tree. where each node represents component and it's properties.
 When the state or the data of the component changes. React updates the corresponding node in the virtual dom. To 
 reflect the new state.
 Then it compares the current version of virtual dom with the previous version. 
 To identify the nodes that should be updated. It will then update those nodes in the actual DOM.

 Technically updating the DOM is not done by the react itself. It's done by companion library called 'React-Dom'.

 
============================================================================================================

> React is js library for creating User interfaces.

> In contrast to react. we have other tools like angular and vue which are frameworks.

# what is the difference between library and framework.

library : A tool that provides the specific functionality.

framework : A set of tools and guidelines for building apps.

> React is just a library for building UI. 

> so we hardly use only react to build modern application. We often need additional tools for concerns such as:

> Routing. : allowing user to go from one page to anther.
> HTTP : making http calls.
> managing app state.
> Internationalization
> Form validation
> animations 
> so on ...

> React doesn't have opinion about additional tools that we should use for these concerns. So we can pick the right tool 
for the job.

==========================================================================================================================

# Building components section

> Building components
> Rendering markup with JSX.
> managing state
> Passing input via props.
> Debugging React apps


# Creating list group component.


=============================================================================================================================

Props vs state

        	     Props                                                				state
> inputs or arguments passed to a component.				|   > internal data managed by component that can change over time.
> similar to function argument.								|   > similar to local variables inside a function.                                                           
> treat them as 'Immutable' (unchangeable or readonly)		|   > state is mutable that is the whole purpose of using state 
ex: in list-group we should not change the props that.   	|     variable. we wanna tell react this component have data that 
we receive from app component. like making heading = "";    |     can change over time
If we do so nothing will happen. But it is an anti pattern  | 
in react. this is based on functional programming principal |  
                                                           
                                                           
                                                           
# these where the difference between props and state. But one thing they both have in common is that.
> Anytime they change react will re-render our component and update the dom accordingly.
                                                           
                                                           
                                                           
                                                           
=============================================================================================================================

# Styling components technics

> vanilla css.
> css modules.
> css-in-js.
> using css library.
                                                           

> mosh doesn't recommended vanilla css for Styling your component. Because there are useful 
library as bootstrap and material UI. so writing all these styles by hands are time consuming.

# css modules.

> one of the issue with vanilla css is name clash. for example if more then one file contains. contains
same styling class. the styles will get merged or overridden.
ex: if my ListGroup.css and App.css has same styling class there would be a issue there.

# this issue is solved by using the 'css modules'. these are locally scoped css. that prevent name class 
to do this we have to follow some steps.

1) name should be like : ListGroup.module.css
2) we access it in the file like : import styles from './filepath'.
in this style object we have the all the style class. to access the the class that have -. we use bracket to access. it 

> as part of bundling our application. vite takes all css modules and creates unique classes for us.
> since it's quite ugly to access the css modules with bracket notation. 
> we use camel nation for css class name in modules.

# css-in-js
> we have another approach for styling component using css in js. (controversial some hate it some love it)
> the idea is that we can write all the style for the component next to it's definition in js or ts file.

> this gives us number of benefits.
 1. just like css modules our styles are going to be scoped.
 2. All the css and js | ts code in one place.
 3. easier to delete a component.
 4. easier to style based on props/state.

> there are different libraries that implement these concept. some of the popular once are below.
 1. styled components
 2. emotion
 3. polished 

# Separation of concerns
  Divide a program into distinct sections where each section
  handles a specific functionality, rather than having 
  everything in one place.

this makes our program
> modular
> easier to understand
> easier to maintain
> easier to modify 

# modularity provides number of benefits
> if our program are modular. we can built, and test 
these modules independently and reuse them in other programs.

> each module is responsible for single concern.

> In a module all the complexity and implementation details are hidden behind a well defined interface.

> some people argue that css-in-js violates the Separation of concerns principal. 
because we put everything in the same file. But that is not the main idea behind Separation of concern.
Because it does not dictate whether we should put everything in one file or spread it across multiple files. 

> Instead it emphasis's that different section or modules in the program should handle specific functionality. 
and all the complexity around a piece of functionality should be hidden behind well defined interface

> so in our case ListGroup hides all the complexity. and the consumer which is App component only interact with interface 

> so css in js does not violates Separation of concern.

> but i don't like css-in-js. reason being. we don't get css intellisense.


# inline-style : don't use unless absolutely required. because it makes our code hard to read.


# Popular UI library
> bootstrap
> material UI
> tailwind (utility first: doesn't have built in component. with this we never have to write css)
	> Daisy UI : (gives full fledged component with cleaner markup)
	> Chakra UI : similar to material UI. It is react component library built on top of tailwind

# Adding Icons	
> react-icons : package of different icon libraries.