React:

# What is React ? How it helps us create better application ?
> React is js library for building dynamic and interactive user interfaces. It was created in facebook in 2011. 
and is currently the most used js library for frontend development.

# why was react created ?
> we know when a webpage is loaded in the browser. The browser takes the html code and creates a tree like structure called. 
Document object model (DOM). This allows us to use js and change the page content in response to user action.

ex: we can use js to hide and element when an button is clicked.

As our application grows working with DOM can get complex and challenging to manage. 

This is where react comes in.

> With react we don't have to worry about querying and updating the dom element. Instead we describe webpage using small reuseable components.
And react will take care of efficiently creating and updating DOM element.

> components help us write reuseable, modular and better organized code.

> we can build components individually. components being for ex: search bar, navbar, main gird, card in that grid.
  and combine them to build the page.
  
> essentially a react application is tree of components. With App being the root. bringing everything together.  


# There are 2 ways to create react app.
1> create react app (CRA) official way.
2> Vite (is more popular because it is much faster then CRA. and gives us smaller bundle sizes.)

> to create new app using vite.
 > npm create vite@latest
 > npm create vite@4.1.0
 
 
>  extension of ts file should be either
	.ts : for plain ts file
	.tsx : tsx for react components.
	
# There are 2 ways to create react components	
	> class
	> Function
	
	# These days Function based components have become more popular. Because they are concise and easier to write.
	
	> for class components watch older course.
	
	> Function based components are the recommended approach for the new projects.

===================================================================================================

# How React works ?	
> currently we have a component tree. with 'App' being the root and 'Message' being the child node.
	
	App
	 |
	 |
  Message 

  When our application starts react takes this component tree. and builds the js data-structure called 'virtual dom'

  div
   |
   |
   h1

 This 'virtual DOM'  is different from the actual DOM in the browser. It's light weight in memory representation of our 
 component tree. where each node represents component and it's properties.
 When the state or the data of the component changes. React updates the corresponding node in the virtual dom. To 
 reflect the new state.
 Then it compares the current version of virtual dom with the previous version. 
 To identify the nodes that should be updated. It will then update those nodes in the actual DOM.

 Technically updating the DOM is not done by the react itself. It's done by companion library called 'React-Dom'.

 
============================================================================================================

> React is js library for creating User interfaces.

> In contrast to react. we have other tools like angular and vue which are frameworks.

# what is the difference between library and framework.

library : A tool that provides the specific functionality.

framework : A set of tools and guidelines for building apps.

> React is just a library for building UI. 

> so we hardly use only react to build modern application. We often need additional tools for concerns such as:

> Routing. : allowing user to go from one page to anther.
> HTTP : making http calls.
> managing app state.
> Internationalization
> Form validation
> animations 
> so on ...

> React doesn't have opinion about additional tools that we should use for these concerns. So we can pick the right tool 
for the job.

==========================================================================================================================

# Building components section

> Building components
> Rendering markup with JSX.
> managing state
> Passing input via props.
> Debugging React apps


# Creating list group component.


=============================================================================================================================

Props vs state

        	     Props                                                				state
> inputs or arguments passed to a component.				|   > internal data managed by component that can change over time.
> similar to function argument.								|   > similar to local variables inside a function.                                                           
> treat them as 'Immutable' (unchangeable or readonly)		|   > state is mutable that is the whole purpose of using state 
ex: in list-group we should not change the props that.   	|     variable. we wanna tell react this component have data that 
we receive from app component. like making heading = "";    |     can change over time
If we do so nothing will happen. But it is an anti pattern  | 
in react. this is based on functional programming principal |  
                                                           
                                                           
                                                           
# these where the difference between props and state. But one thing they both have in common is that.
> Anytime they change react will re-render our component and update the dom accordingly.
                                                           
                                                           
                                                           
                                                           
=============================================================================================================================

# Styling components technics

> vanilla css.
> css modules.
> css-in-js.
> using css library.
                                                           

> mosh doesn't recommended vanilla css for Styling your component. Because there are useful 
library as bootstrap and material UI. so writing all these styles by hands are time consuming.

# css modules.

> one of the issue with vanilla css is name clash. for example if more then one file contains. contains
same styling class. the styles will get merged or overridden.
ex: if my ListGroup.css and App.css has same styling class there would be a issue there.

# this issue is solved by using the 'css modules'. these are locally scoped css. that prevent name class 
to do this we have to follow some steps.

1) name should be like : ListGroup.module.css
2) we access it in the file like : import styles from './filepath'.
in this style object we have the all the style class. to access the the class that have -. we use bracket to access. it 

> as part of bundling our application. vite takes all css modules and creates unique classes for us.
> since it's quite ugly to access the css modules with bracket notation. 
> we use camel nation for css class name in modules.

# css-in-js
> we have another approach for styling component using css in js. (controversial some hate it some love it)
> the idea is that we can write all the style for the component next to it's definition in js or ts file.

> this gives us number of benefits.
 1. just like css modules our styles are going to be scoped.
 2. All the css and js | ts code in one place.
 3. easier to delete a component.
 4. easier to style based on props/state.

> there are different libraries that implement these concept. some of the popular once are below.
 1. styled components
 2. emotion
 3. polished 

# Separation of concerns
  Divide a program into distinct sections where each section
  handles a specific functionality, rather than having 
  everything in one place.

this makes our program
> modular
> easier to understand
> easier to maintain
> easier to modify 

# modularity provides number of benefits
> if our program are modular. we can built, and test 
these modules independently and reuse them in other programs.

> each module is responsible for single concern.

> In a module all the complexity and implementation details are hidden behind a well defined interface.

> some people argue that css-in-js violates the Separation of concerns principal. 
because we put everything in the same file. But that is not the main idea behind Separation of concern.
Because it does not dictate whether we should put everything in one file or spread it across multiple files. 

> Instead it emphasis's that different section or modules in the program should handle specific functionality. 
and all the complexity around a piece of functionality should be hidden behind well defined interface

> so in our case ListGroup hides all the complexity. and the consumer which is App component only interact with interface 

> so css in js does not violates Separation of concern.

> but i don't like css-in-js. reason being. we don't get css intellisense.


# inline-style : don't use unless absolutely required. because it makes our code hard to read.


# Popular UI library
> bootstrap
> material UI
> tailwind (utility first: doesn't have built in component. with this we never have to write css)
	> Daisy UI : (gives full fledged component with cleaner markup)
	> Chakra UI : similar to material UI. It is react component library built on top of tailwind

# Adding Icons	
> react-icons : package of different icon libraries.

=============================================================================================================================
# Managing Component State.

> state management is fundamental concept in react. So we need to understand how component state is stored and updated.

#> Understanding the state hook.
	Using a state hook we can add state to a component.

   > React updates state asynchronously. (meaning not immediately)

	 This is done for performance reason. 
	 
	 ex: As part of handling an event we could set multiple state variables. if every time we called set function and
	 react re-render our component. we would end up with too many re-renders. which is unnecessary.

	 So for performance reason. react takes all of the set function updates. 
	 Batches them and applies them at the later time.
	 // so in our case after event handler finishes the execution

	> State is stored outside of components.

	  In js the variables that we declare inside a function are scoped to that function. So when this function or 
	  component finishes execution our local variable is going to be removed from the memory. So when react re-renders this 
	  component again. the local variable will be initialized again. so the update that we applied will be lost and 
	  we cannot track the state changes init.

	  This is the reason why we use 'useSate' state Hook to store the state outside of this component.
	  So somewhere react is going to store all the state variable for this component. And it will automatically 
	  remove those variable when this component is no longer visible on the screen.

	>  Use hooks at the top level of your components.
		

		const [isVisible, setVisibility] = useState(false); 
  		const [isApproved, setApproved] = useState(true); 

  > we are using state hook to declare and initialize two boolean variables.
  > these names that we have here just local identifier in this function. react is not aware of them.

  > react will store value somewhere in memory most likely like this [false,true] . so next time react re-renders 
    our component. it is going to look at this array. grab first value and store it inside the 'isVisible' array.
  
  >  So react relies on the order of these elements. So it can map these values properly to local variable
     in this function.

  >  So in our component we should use hooks on the top level. and not inside if,for or nested functions etc. 
  	 Because these constructs can impact the order in which the state hook is used.



# choosing the state structure.

> Avoid redundant state variable. (anything that can be computed from existing variables)
> Group related variables inside an object.
> Avoid deeply nested structure because they are hard to update. prefer to use flat structure.


# Keeping components pure :

> purity is the fundamental concept around react.

> what is purity ?
	In computer science A pure function is a function that Given the same input, it always returns the same result.

> so if we call a function 10 times and every time we get the same result we say that function is pure.
  but if we get different results at different times we say that function is impure.

> React is designed around this concept of purity. It expects every component we create to be a pure function.
  So if we give it the same inputs like the same props. It should always return the same JSX.

  This is for performance reason. if the inputs of the component haven't change react can skip re-rendering that component.

> How can we keep our components pure ?
	To keep the components pure keep changes out of the render phase.


================================> connecting to backend

> react is a library for building UI or the frontend.

> But every application also needs a backend. which is the part that runs on the server. We can think of this 
as an engine of an application that powers the frontend. It provides 
	> Business logic
	> data management
	> security features such as authentication adn authorization

# backend framework
> express.js
> Django
> Ruby on rails
> Spring
> ASP.NET CORE


# How to use the effect hook in react ?

> our react component should be pure function. a pure function should not have any side-effect and 
should return same output if we give is same input.

> To keep components pure. Keep changes out of the render phase.

# but there are situations. side effects that we might need to do. for example
1. Store data in local storage.
2. Call the server to fetch / save data.
3. Manually modify the DOM.

none of these situations are about rendering a component. they have nothing to do with returning a jsx markup
where can we implement them ?

This is where the effect hook comes in. 
'useEffect(()=>{})'
"To execute a piece of code 'after' a component is rendered."



#Understanding the http request 

> when we call the get method of axios. axios sends the http request to the server. http is short for hypertext transfer protocol.
It is a protocol for transferring the data over the internet. This same protocol powers the web.


> so when we visit a website. our browser sends an http request to website server asking for some content. The server then response with http response
which contains some html,css and other resources needed to display website in our browser.


> In http every request and response has 2 sections
 1. Headers : here we specify metadata about request or response
 2. Body    : where we supply or get the data.


# handling error

> while calling server many things can go wrong.
	1. our network connection drops out.
	2. server can go offline
we should anticipate such problems and handle errors properly



# what is render phase in react?

> In React, the rendering process consists of two main phases: the Render phase and the Commit phase1.

Render Phase:

This is the initial phase of the rendering process.
It starts from the root component and works its way down, building out a React element tree of what the actual DOM should look like2.
The Render phase takes your JSX and turns it into a JavaScript representation of what the HTML structure should look like. This is called the VirtualDOM1.
Once the Virtual DOM is created, React will compare what it has built out to what the actual DOM has using a diff algorithm1.
After the comparison, it ends up with a list of what needs to be changed. This is still considered part of the rendering phase1.
There are two types of renders: An initial render and a re-render1.
Initial rendering is when your app first starts up1.
A re-render is when your state or props have updated1.

Commit Phase:

Once React has done the comparison between its new and old components using the diff algorithm and has a list of changes, 
it will go ahead and surgically apply those changes to the actual DOM1.
This is where React actually touches the DOM and makes changes1.
It’s important to point out that React may go through the render phase but never commit. 
This can happen if the component returns the same result as the last time1.
Understanding these phases can help you optimize your apps and make better decisions on how to structure your React application1.


# how to connect react app to backend ?